name: Clash Config Testing ‚Äì Enhanced

on:
  schedule:
    - cron: '0 0 * * *'  # Every day at 00:00 UTC
  workflow_dispatch:
    inputs:
      test_workers:
        description: 'Number of parallel test workers'
        required: false
        default: '20'
      test_timeout:
        description: 'Test timeout (seconds)'
        required: false
        default: '10'
  push:
    branches: [main]
    paths:
      - 'sub.txt'
      - 'scripts/**'
      - '.github/workflows/clash-config-test.yml'

jobs:
  test-configs:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml
          echo "‚úì Python dependencies installed"

      - name: Download and install Clash Meta
        run: |
          CLASH_VERSION="v1.18.0"
          CLASH_URL="https://github.com/MetaCubeX/mihomo/releases/download/${CLASH_VERSION}/mihomo-linux-amd64-${CLASH_VERSION}.gz"
          echo "üì• Downloading Clash Meta ${CLASH_VERSION}..."
          wget -q "${CLASH_URL}" -O clash.gz
          gunzip clash.gz && chmod +x clash
          mkdir -p ~/.local/bin
          mv clash ~/.local/bin/clash
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          ~/.local/bin/clash -v
          echo "‚úì Clash Meta installed"

      - name: Download subscriptions
        id: download
        run: |
          cd scripts
          python download_subscriptions.py

      - name: Test configs
        id: test
        env:
          TEST_WORKERS: ${{ github.event.inputs.test_workers || '20' }}
          TEST_TIMEOUT: ${{ github.event.inputs.test_timeout || '10' }}
        run: |
          cd scripts
          python run.py
          if [ -f "../working_configs/metadata.json" ]; then
            WORKING=$(python -c "import sys,json;print(json.load(sys.stdin)['total_working'])" < ../working_configs/metadata.json)
            echo "working_count=$WORKING" >> $GITHUB_OUTPUT
            echo "‚úì Found $WORKING working proxies"
          else
            echo "working_count=0" >> $GITHUB_OUTPUT
            echo "‚ö† No working proxies found"
          fi
        continue-on-error: true

      - name: Generate detailed summary
        if: always()
        run: |
          echo "# üîç Clash Config Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "working_configs/metadata.json" ]; then
            TOTAL=$(python -c "import sys,json;print(json.load(sys.stdin)['total_working'])" < working_configs/metadata.json)
            AVG_LATENCY=$(python -c "import sys,json;print(json.load(sys.stdin)['latency']['average'])" < working_configs/metadata.json)
            echo "## ‚úÖ Test Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìä Statistics" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Working Proxies:** $TOTAL" >> $GITHUB_STEP_SUMMARY
            echo "- **Average Latency:** ${AVG_LATENCY}ms" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üì¶ Output Files" >> $GITHUB_STEP_SUMMARY
            echo "- \`working_configs/all_working.txt\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`working_configs/all_working_base64.txt\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`working_configs/clash_config.yaml\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`working_configs/by_protocol/\`" >> $GITHUB_STEP_SUMMARY

          elif [ -f "temp_configs/download_stats.json" ]; then
            DOWNLOADED=$(python -c "import sys,json;print(json.load(sys.stdin)['total_parsed'])" < temp_configs/download_stats.json)
            echo "## ‚ö†Ô∏è Testing Failed" >> $GITHUB_STEP_SUMMARY
            echo "- **Proxies Downloaded:** $DOWNLOADED" >> $GITHUB_STEP_SUMMARY
            echo "- **Working Proxies:** 0" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Download Failed" >> $GITHUB_STEP_SUMMARY
            echo "1. Check sub.txt URLs" >> $GITHUB_STEP_SUMMARY
            echo "2. Network connectivity" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Commit and push results
        if: success() && steps.test.outputs.working_count != '0'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add working_configs/
          if git diff --staged --quiet; then
            echo "üìù No changes to commit"
          else
            TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
            WORKING_COUNT="${{ steps.test.outputs.working_count }}"
            PROTOCOLS=$(python -c "import sys,json;data=json.load(sys.stdin);print(', '.join([f'{k}:{v}' for k,v in data['by_protocol'].items()]))" < working_configs/metadata.json)
            AVG_LATENCY=$(python -c "import sys,json;print(json.load(sys.stdin)['latency']['average'])" < working_configs/metadata.json)
            git commit -m "üîÑ Update working configs ‚Äì ${TIMESTAMP}" \
                       -m "üìä Working: ${WORKING_COUNT}, Avg Latency: ${AVG_LATENCY}ms" \
                       -m "Protocols: ${PROTOCOLS}"
            git push
            echo "‚úÖ Changes committed and pushed"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            working_configs/
            temp_configs/*.json
            temp_configs/*.txt
          retention-days: 7

      - name: Clean up temporary files
        if: always()
        run: |
          rm -rf temp_configs/*.yaml temp_configs/config_*.yaml
          echo "üßπ Cleanup complete"